@model GH.Web.Models.BookingViewModel

@{
    ViewBag.Title = "TestAddRepair";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
.wizard-step
{
	display: none;
}

.display-field
{
	font-weight: bold;
}
</style>

@*<link href="@Url.Content("~/Scripts/validationEngine/validationEngine.jquery.css")" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="@Url.Content("~/Scripts/validationEngine/jquery.validationEngine.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/validationEngine/jquery.validationEngine-en.js")"></script>
  *@

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script type="text/javascript">
    $(function () {

        //$("#formValidation").validationEngine('attach');

        $(".wizard-step:first").fadeIn(); // show first step


        // attach backStep button handler
        // hide on first step
        $("#back-step").hide().click(function () {
            var $step = $(".wizard-step:visible"); // get current step
            if ($step.prev().hasClass("wizard-step")) { // is there any previous step?
                $step.hide().prev().fadeIn();  // show it and hide current step

                // disable backstep button?
                if (!$step.prev().prev().hasClass("wizard-step")) {
                    $("#back-step").hide();
                }
            }
        });


        // attach nextStep button handler       
        $("#next-step").click(function () {

            var $step = $(".wizard-step:visible"); // get current step

            var validator = $("form").validate(); // obtain validator
            var anyError = false;
            $step.find("input").each(function () {
                if (!validator.element(this)) { // validate every input element inside this step
                    anyError = true;
                }

            });

            if (anyError)
                return false; // exit if any error found




            if ($step.next().hasClass("confirm")) { // is it confirmation?
                // show confirmation asynchronously
                $.post("/Home/Confirm", $("form").serialize(), function (r) {
                    // inject response in confirmation step
                    $(".wizard-step.confirm").html(r);
                });

            }

            if ($step.next().hasClass("wizard-step")) { // is there any next step?
                $step.hide().next().fadeIn();  // show it and hide current step
                $("#back-step").show();   // recall to show backStep button
            }

            else { // this is last step, submit form
                $("form").submit();
            }


        });

    });

</script>
<div id="block-create" class="block">
    <div class="content">
        <h2 class="title">
            TestAddRepair</h2>
        <div class="inner">
@using (Html.BeginForm("TestAddRepair", "Home", FormMethod.Post, new {@id = "formValidation", @class = "form" }))
{
    <div class="flash">
         <p>@Html.ValidationSummary(true, string.Empty, new { @class = "message error" })</p>
    </div>
    
      <fieldset>
        <div class="wizard-step">
            <h3>
                Step 1: Customer.</h3>
            <div class="editor-label">
                @Html.LabelFor(model => model.Customer.sCustomerName)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Customer.sCustomerName, new { @class = "validate[required]" })
                @Html.ValidationMessageFor(model => model.Customer.sCustomerName)
            </div>
        </div>
        <div class="wizard-step" >
            <h3>
                Step 2: Product</h3>
            <div class="editor-label">
                @Html.LabelFor(model => model.Product.sProductName)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Product.sProductName)
                @Html.ValidationMessageFor(model => model.Product.sProductName)
            </div>
        </div>
        
        <div class="wizard-step confirm">
        
        </div>
       
       
        <p>
            <input type="button" id="back-step" name="back-step" value="< Back" />
            <input type="button" id="next-step" name="next-step" value="Next >" />            
        </p>
    </fieldset>
    
    
    
    
    

	<div class="group navform wat-cf">
		<div class="right">
			<button class="button" type="submit">
			<img src="@Url.Content("~/images/icons/tick.png")" alt="Save" />
			Save
			</button>
			<span class="text_button_padding">or</span>
			@Html.ActionLink("Cancel", "Index", null, new { @class = "text_button_padding link_button" })
		</div>
	</div>
}
        </div>
    </div>
</div>

